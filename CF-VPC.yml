AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a VPC
Metadata:
  LICENSE: Apache License, Version 2.0
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCBlock
          - DMZ1publicSubnet
          - DMZ2publicSubnet
          - AppLayer1privateSubnet
          - AppLayer2privateSubnet
          - DBLayer1privateSubnet
          - DBLayer2privateSubnet
          - RemoteAccessCIDR
      - Label:
          default: Bastion EC2 configuration
        Parameters:
          - KeyName
          - BastionAMIOS
          - BastionInstanceType
      - Label:
          default: Linux bastion configuration
        Parameters:
          - NumBastionHosts
          - BastionHostName
        #- BastionTenancy #optional
        #- EnableBanner   #optional
        #- BastionBanner  #optional
        #- EnableTCPForwarding #optional
        #- EnableX11Forwarding #optional
    ParameterLabels:
      ##################################
      BastionAMIOS:
        default: Bastion AMI OS
      BastionHostName:
        default: Bastion Host Name
      BastionInstanceType:
        default: Bastion instance type
      KeyName:
        default: Key pair name
      NumBastionHosts:
        default: Number of bastion hosts
      ##################################
      DMZ1publicSubnet:
        default: Public subnet 1 ID
      DMZ2publicSubnet:
        default: Public subnet 2 ID
      AppLayer1privateSubnet:
        default: Private subnet 1 ID
      AppLayer2privateSubnet:
        default: Private subnet 2 ID
      DBLayer1privateSubnet:
        default: Private subnet 1 ID for DB
      DBLayer2privateSubnet:
        default: Private subnet 2 ID for DB
      ##################################
      RemoteAccessCIDR:
        default: Allowed bastion external access CIDR
      ##################################
      VPCID:
        default: VPC ID

Parameters: #1. TODO change order of parameters listed https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-interface.html
  VPCBlock:
    Type: String
    Default: 10.99.0.0/16
    Description: None default VPC subnet

  DMZ1publicSubnet:
    Type: String
    Default: 10.99.1.0/24
    Description: "DMZ1public Subnet"

  DMZ2publicSubnet:
    Type: String
    Default: 10.99.2.0/24
    Description: "DMZ2public Subnet"

  AppLayer1privateSubnet:
    Type: String
    Default: 10.99.11.0/24
    Description: "AppLayer1private Subnet"

  AppLayer2privateSubnet:
    Type: String
    Default: 10.99.12.0/24
    Description: "AppLayer2private Subnet"

  DBLayer1privateSubnet:
    Type: String
    Default: 10.99.21.0/24
    Description: "DBLayer1private Subnet"

  DBLayer2privateSubnet:
    Type: String
    Default: 10.99.22.0/24
    Description: "DBLayer2private Subnet"

  BastionAMIOS:
    AllowedValues:
      - Amazon-Linux2-HVM
    Default: Amazon-Linux2-HVM
    Description: The Linux distribution for the AMI to be used for the bastion instances.
    Type: String
  BastionHostName:
    Default: "LinuxBastion"
    Description: The value used for the name tag of the bastion host
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  BastionInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
    Default: t2.micro
    Description: Amazon EC2 instance type for the bastion instances.
    Type: String

  NumBastionHosts:
    AllowedValues:
      - "1"
      - "2"
    Default: "1"
    Description: The number of bastion hosts to create. Min 1, Max 2.
    Type: String

  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the bastions.
    Type: String

  WebServerPort:
    Description: The TCP port for the Web Server
    Type: Number
    Default: "8888"

Mappings:
  RegionMap: #optional add support for all regions
    us-east-1:
      AmazonLinux2: ami-0fc61db8544a617ed
    us-east-2:
      AmazonLinux2: ami-0e01ce4ee18447327
    us-west-1:
      AmazonLinux2: ami-09a7fe78668f1e2c0
    us-west-2:
      AmazonLinux2: ami-0ce21b51cb31a48b8
    ca-central-1:
      AmazonLinux2: ami-0bf54ac1b628cf143

Resources:
  #============= VPC ==================
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CloudFormation

  #========IGW,PublicRT,RoutesForPublicRT,PrivateRT,RoutesForPrivateRT ==================
  #========DMZ1publicRTAssociation,DMZ2publicRTAssociation,AppLayer1privateRTAssociation,AppLayer2privateRTAssociation=====
  #===== EIPForNATGWs, NATGWs,

  #===== Internet Gateway ============
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CloudFormation
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CFVPC
      InternetGatewayId: !Ref IGW

  #===== Public Route Tables =========
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: resource
          Value: CloudFormation

  #======== Routes For PublicRT ==========
  RoutesForPublicRT:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW #!
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  #===== Private Route Tables =========
  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: PrivateRT1

  PrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: PrivateRT2

  #======= Second PrivateRT for MultiAZ ========
  ##################################
  ##################################
  ##################################

  #======== Routes For PrivateRT ==========
  RoutesForPrivateRTA:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1 #!NATGatewayA
    Properties:
      RouteTableId: !Ref PrivateRT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RoutesForPrivateRTB:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2 #!NATGatewayA
    Properties:
      RouteTableId: !Ref PrivateRT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  #====== Associate Public Route for Public Subnets ====
  DMZ1publicRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DMZ1public
      RouteTableId: !Ref PublicRT

  DMZ2publicRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DMZ2public
      RouteTableId: !Ref PublicRT

  #====== Associate Private Route for Private Subnets ====
  AppLayer1privateRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppLayer1private
      RouteTableId: !Ref PrivateRT1

  AppLayer2privateRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppLayer2private
      RouteTableId: !Ref PrivateRT2

  #==== Route Table and Route Association for Internal only - Databases
  ############################################
  #TODO: DB association
  ############################################

  #======= ElasticIP for NAT Gateways ======
  NATGWEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachIGW
    Properties:
      Domain: !Ref CFVPC
      Tags:
        - Key: Name
          Value: NATGWEIP1

  NATGWEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachIGW
    Properties:
      Domain: !Ref CFVPC
      Tags:
        - Key: Name
          Value: NATGWEIP2

  BastionEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachIGW
    Properties:
      Domain: !Ref CFVPC
      Tags:
        - Key: Name
          Value: Bastion

  #===== NATGWs =========
  NATGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachIGW
    Properties:
      SubnetId: !Ref DMZ1public
      AllocationId: !GetAtt NATGWEIP1.AllocationId
      Tags:
        - Key: Name
          Value: aws
        - Key: resource
          Value: CloudFormation

  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachIGW
    Properties:
      SubnetId: !Ref DMZ2public
      AllocationId: !GetAtt NATGWEIP2.AllocationId
      Tags:
        - Key: Name
          Value: NATGateway2
        - Key: resource
          Value: CloudFormation
  #============= Subnets: DMZ1public,DMZ2public,AppLayer1private,AppLayer2private,DBLayer1private,DBLayer2private ==================
  DMZ1public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DMZ1publicSubnet
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DMZ1public #TODO:  NAME and !Join [ "", [ !Ref Environment, "-Public-A" ] ]

  DMZ2public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DMZ2publicSubnet
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DMZ2public

  AppLayer1private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref AppLayer1privateSubnet
      Tags:
        - Key: Name
          Value: AppLayer1private

  AppLayer2private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref AppLayer2privateSubnet
      Tags:
        - Key: Name
          Value: AppLayer2private #! Use Join with separator "-" CF

  DBLayer1private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DBLayer1privateSubnet
      Tags:
        - Key: Name
          Value: DBLayer1private #!

  DBLayer2private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DBLayer2privateSubnet
      Tags:
        - Key: Name
          Value: DBLayer2private #!

  ######################################################################

  DMZNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: DMZNACL
      VpcId: !Ref CFVPC #required

  DMZ1publicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref DMZNACL #required
      SubnetId: !Ref DMZ1public #required

  DMZ2publicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref DMZNACL #required
      SubnetId: !Ref DMZ2public #required

  DMZNACLEntryIngress100:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "100"
      Protocol: "6"
      PortRange:
        From: "22"
        To: "22"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress100:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "100"
      Protocol: "6"
      PortRange:
        From: "22"
        To: "22"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  WebAppNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: WAppNACL
  SubnetNetworkAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref AppLayer1private
      NetworkAclId: !Ref WebAppNACL
  SubnetNetworkAclAssociationD:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref AppLayer2private
      NetworkAclId: !Ref WebAppNACL
  WebAppNACLEntryIngress100:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: WebAppNACL
    Properties:
      NetworkAclId: !Ref WebAppNACL
      RuleNumber: "100"
      Protocol: "6"
      PortRange:
        From: "22"
        To: "22"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 10.99.0.0/16
  WebAppNACLEntryIngress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: WebAppNACL
    Properties:
      NetworkAclId: !Ref WebAppNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 10.99.0.0/16
  WebAppNACLEntryIngress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: WebAppNACL
    Properties:
      NetworkAclId: !Ref WebAppNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 10.99.0.0/16
  WebAppNACLEntryIngress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: WebAppNACL
    Properties:
      NetworkAclId: !Ref WebAppNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  WebAppNACLEntryEgress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: WebAppNACL
    Properties:
      NetworkAclId: !Ref WebAppNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  WebAppNACLEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: WebAppNACL
    Properties:
      NetworkAclId: !Ref WebAppNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  WebAppNACLEntryEgress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: WebAppNACL
    Properties:
      NetworkAclId: !Ref WebAppNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 10.99.0.0/16

  WebALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: WebALB
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref DMZ1public
        - !Ref DMZ2public
      Tags:
        - Key: Name
          Value: WebALB

  WebALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn: !Ref ALBTG1WebApp
      LoadBalancerArn: !Ref WebALB #required
      Port: 80 #required
      Protocol: HTTP #required

  #Listener rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward # traffic to the specific target group
          TargetGroupArn: !Ref ALBTG1WebApp
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref WebALBListener
      Priority: 1

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALBSG
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSG

  ALBTG1WebApp:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: TG1WebApp
      HealthCheckEnabled: true #default for instance - enabled
      HealthCheckIntervalSeconds: 5 #default 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP #default for ALB-HTTP, NLB-TCP
      HealthCheckTimeoutSeconds: 2 #default HTTP, HTTPS-5sec
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: ALBTG1WebApp
      TargetType: instance #default
      UnhealthyThresholdCount: 2 #default 2
      VpcId: !Ref CFVPC

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BastionSG
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0 # is it correct ?
      Tags:
        - Key: Name
          Value: BastionSG

  ########################## AutoScaling Group ########################
  ASGWebServer:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - LCWeb
    Properties:
      AutoScalingGroupName: ASGWebServer
      #AvailabilityZones: !GetAZs ""
      VPCZoneIdentifier:
        - !Ref AppLayer1private
        - !Ref AppLayer2private
      LaunchConfigurationName: !Ref LCWeb #USE LaunchTemplate instead ! https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
      MaxSize: 4
      MinSize: 2 #Desired ?
      HealthCheckGracePeriod: 180
      #LoadBalancerNames:
      #  - !Ref WebALB
      Tags:
        - Key: Name
          Value: ASGWebServer
          PropagateAtLaunch: false
      TargetGroupARNs:
        - !Ref ALBTG1WebApp

  ScalingUpPolicyASGWebServer:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGWebServer #required
      Cooldown: 1
      ScalingAdjustment: 1

  ScalingDownPolicyASGWebServer:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGWebServer #required
      Cooldown: 60
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 90
      AlarmDescription: Scale-up if CPU > 90% for 1 minute
      Period: 60
      AlarmActions:
        - Ref: ScalingUpPolicyASGWebServer
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: ASGWebServer
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 40
      AlarmDescription: Scale-down if CPU < 40% for 2 minute
      Period: 60
      AlarmActions:
        - Ref: ScalingDownPolicyASGWebServer
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: ASGWebServer
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  # LaunchConfigWeb2:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     LaunchConfigurationName: LaunchConfigWeb2
  #     AssociatePublicIpAddress: false
  #     #IamInstanceProfile:
  #     ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
  #     #EbsOptimized: true|false
  #     InstanceMonitoring: true
  #     InstanceType: t2.micro
  #     #KernelId:
  #     KeyName: !Ref KeyName
  #     SecurityGroups:
  #       - !Ref WebServerSG
  #     UserData: !Base64 |
  #       #!/bin/bash
  #       yum -y update
  #       yum -y install httpd php
  #       echo "<html><body bgcolor=green><center><h1><p font color=red>Web Server - 1</p></h1></center></html>" > /var/www/html/index.html
  #       sudo service httpd start
  #       chkconfig httpd on

  LCWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      #IamInstanceProfile: String
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AmazonLinux2] #required
      InstanceMonitoring: true
      InstanceType: t2.micro #required

      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WebServerSG

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y update
          yum -y install httpd php
          h=`ec2-metadata -h | awk '{print $2}'`
          echo "<html><body bgcolor=green><center><h1><p font color=red>Web Server - 1</p></h1><p><?php echo $h ?></p></center></html>" > /var/www/html/index.html
          sudo service httpd start
          chkconfig httpd on

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSG
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Ref ALBSG
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          SourceSecurityGroupId: !Ref BastionSG
      Tags:
        - Key: Name
          Value: WebServerSG

  ASGBastion:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: #?
      - LCBastion
    Properties:
      AutoScalingGroupName: ASGBastion
      #AvailabilityZones: !GetAZs ""
      VPCZoneIdentifier:
        - !Ref DMZ1public
        - !Ref DMZ2public
      LaunchConfigurationName: !Ref LCBastion #USE LaunchTemplate instead ! https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
      MaxSize: 1
      MinSize: 1 #Desired ?
      HealthCheckGracePeriod: 180
      #LoadBalancerNames:
      #  - !Ref WebALB
      Tags:
        - Key: Name
          Value: ASGBastion
          PropagateAtLaunch: true
      #TargetGroupARNs:
      #  - !Ref TG1Bastion

  LCBastion:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      #LaunchConfigurationName: LCBastion
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref BastionIamInstanceProfile
      #IamInstanceProfile:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AmazonLinux2]
      #EbsOptimized: true|false
      InstanceMonitoring: true
      InstanceType: !Ref BastionInstanceType
      #KernelId:
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref BastionSG
      UserData: !Base64 |
        #!/bin/bash -ex
        yum install -y jq awscli
        region=`ec2-metadata --availability-zone | awk '{print $2}' | sed 's/.$//'`
        echo "[default]" > /root/.aws/config
        echo "region = ${region}" >> /root/.aws/config
        ALLOCATION_ID=`aws ec2 describe-addresses --region $REGION_ID --filters="Name=tag:Name,Values=Bastion" | jq -r '.Addresses[] | "\(.InstanceId) \(.AllocationId)"' | grep null | awk '{print $2}' | xargs shuf -n1 -e`
        INSTANCE_ID=`ec2-metadata -i | cut -d " " -f2`
        if [ ! -z $ALLOCATION_ID ]; then
          aws ec2 associate-address --region $REGION_ID --instance-id $INSTANCE_ID --allocation-id $ALLOCATION_ID --allow-reassociation
        fi

  BastionIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref BastionIamRole

  # full access to other ec2 instances
  BastionIamPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: fullAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "ec2:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:DescribeAddresses
              - ec2:AllocateAddress #Maybe not needed.
              - ec2:DescribeInstances #maybe not needed.
              - ec2:AssociateAddress
            Resource: "*"
      Roles:
        - !Ref BastionIamRole

  BastionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  # BastionEC2:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     KeyName: !Ref KeyName
  #     ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
  #     InstanceType: t2.micro
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: "true"
  #         PrivateIpAddress: "10.99.1.5" #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  #         DeviceIndex: "0"
  #         GroupSet:
  #           - Ref: "BastionSG"
  #         SubnetId:
  #           Ref: "DMZ1public"
  #     #          DeleteOnTermination: "true"
  #     UserData: !Base64 |
  #       #!/bin/bash -ex
  #       # put your script here
  #     Tags:
  #       - Key: Name
  #         Value: Bastion
##########################

Outputs:
  BastionPublicIP:
    Description: Public IP of the Bastion Host
    Value: !Ref BastionEIP
  URL:
    Description: The URL of the website
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - WebALB
          - DNSName
