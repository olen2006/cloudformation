AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a VPC
Metadata:
  LICENSE: Apache License, Version 2.0
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCBlock
          - DMZ1publicSubnet
          - DMZ2publicSubnet
          - AppLayer1privateSubnet
          - AppLayer2privateSubnet
          - DBLayer1privateSubnet
          - DBLayer2privateSubnet
          - RemoteAccessCIDR
      - Label:
          default: Bastion EC2 configuration
        Parameters:
          - KeyName
          - BastionAMIOS
          - BastionInstanceType
      - Label:
          default: Linux bastion configuration
        Parameters:
          - NumBastionHosts
          - BastionHostName
        #- BastionTenancy #optional
        #- EnableBanner   #optional
        #- BastionBanner  #optional
        #- EnableTCPForwarding #optional
        #- EnableX11Forwarding #optional
    ParameterLabels:
      ##################################
      BastionAMIOS:
        default: Bastion AMI OS
      BastionHostName:
        default: Bastion Host Name
      BastionInstanceType:
        default: Bastion instance type
      KeyName:
        default: Key pair name
      NumBastionHosts:
        default: Number of bastion hosts
      ##################################
      DMZ1publicSubnet:
        default: Public subnet 1 ID
      DMZ2publicSubnet:
        default: Public subnet 2 ID
      AppLayer1privateSubnet:
        default: Private subnet 1 ID
      AppLayer2privateSubnet:
        default: Private subnet 2 ID
      DBLayer1privateSubnet:
        default: Private subnet 1 ID for DB
      DBLayer2privateSubnet:
        default: Private subnet 2 ID for DB
      ##################################
      RemoteAccessCIDR:
        default: Allowed bastion external access CIDR
      ##################################
      VPCID:
        default: VPC ID

Parameters: #1. TODO change order of parameters listed https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-interface.html
  VPCBlock:
    Type: String
    Default: 10.99.0.0/16
    Description: None default VPC subnet

  DMZ1publicSubnet:
    Type: String
    Default: 10.99.1.0/24
    Description: "DMZ1public Subnet"

  DMZ2publicSubnet:
    Type: String
    Default: 10.99.2.0/24
    Description: "DMZ2public Subnet"

  AppLayer1privateSubnet:
    Type: String
    Default: 10.99.11.0/24
    Description: "AppLayer1private Subnet"

  AppLayer2privateSubnet:
    Type: String
    Default: 10.99.12.0/24
    Description: "AppLayer2private Subnet"

  DBLayer1privateSubnet:
    Type: String
    Default: 10.99.21.0/24
    Description: "DBLayer1private Subnet"

  DBLayer2privateSubnet:
    Type: String
    Default: 10.99.22.0/24
    Description: "DBLayer2private Subnet"

  BastionAMIOS:
    AllowedValues:
      - Amazon-Linux2-HVM
      #- Amazon-Linux-HVM #optional
    Default: Amazon-Linux2-HVM
    Description: The Linux distribution for the AMI to be used for the bastion instances.
    Type: String
  BastionHostName:
    Default: "LinuxBastion"
    Description: The value used for the name tag of the bastion host
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  BastionInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
    Default: t2.micro
    Description: Amazon EC2 instance type for the bastion instances.
    Type: String

  NumBastionHosts:
    AllowedValues:
      - "1"
      - "2"
    Default: "1"
    Description: The number of bastion hosts to create. Min 1, Max 2.
    Type: String

  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the bastions.
    Type: String

Mappings:
  RegionMap: #optional add support for all regions
    us-east-1:
      HVM64: ami-062f7200baf2fa504
    us-east-2:
      HVM64: ami-02ccb28830b645a41
    us-west-1:
      HVM64: ami-03caa3f860895f82e
    us-west-2:
      HVM64: ami-04590e7389a6e577c
    ca-central-1:
      HVM64: ami-0a269ca7cc3e3beff

Resources:
  #============= VPC ==================
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CloudFormation

  #========IGW,PublicRT,RoutesForPublicRT,PrivateRT,RoutesForPrivateRT ==================
  #========DMZ1publicRTAssociation,DMZ2publicRTAssociation,AppLayer1privateRTAssociation,AppLayer2privateRTAssociation=====
  #===== EIPForNATGWs, NATGWs,

  #===== Internet Gateway ============
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: resource
          Value: CloudFormation
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CFVPC
      InternetGatewayId: !Ref IGW

  #===== Public Route Tables =========
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: resource
          Value: CloudFormation

  #======== Routes For PublicRT ==========
  RoutesForPublicRT:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW #!
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  #===== Private Route Tables =========
  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: PrivateRT1

  PrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: PrivateRT2

  #======= Second PrivateRT for MultiAZ ========
  ##################################
  ##################################
  ##################################

  #======== Routes For PrivateRT ==========
  RoutesForPrivateRTA:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1 #!NATGatewayA
    Properties:
      RouteTableId: !Ref PrivateRT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RoutesForPrivateRTB:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2 #!NATGatewayA
    Properties:
      RouteTableId: !Ref PrivateRT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  #====== Associate Public Route for Public Subnets ====
  DMZ1publicRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DMZ1public
      RouteTableId: !Ref PublicRT

  DMZ2publicRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DMZ2public
      RouteTableId: !Ref PublicRT

  #====== Associate Private Route for Private Subnets ====
  AppLayer1privateRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppLayer1private
      RouteTableId: !Ref PrivateRT1

  AppLayer2privateRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppLayer2private
      RouteTableId: !Ref PrivateRT2

  #==== Route Table and Route Association for Internal only - Databases
  ############################################
  #TODO: DB association
  ############################################

  #======= ElasticIP for NAT Gateways ======
  NATGWEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachIGW
    Properties:
      Domain: !Ref CFVPC

  NATGWEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachIGW
    Properties:
      Domain: !Ref CFVPC

  #===== NATGWs =========
  NATGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachIGW
    Properties:
      SubnetId: !Ref DMZ1public
      AllocationId: !GetAtt NATGWEIP1.AllocationId
      Tags:
        - Key: Name
          Value: aws
        - Key: resource
          Value: CloudFormation

  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachIGW
    Properties:
      SubnetId: !Ref DMZ2public
      AllocationId: !GetAtt NATGWEIP2.AllocationId
      Tags:
        - Key: Name
          Value: NATGateway2
        - Key: resource
          Value: CloudFormation
  #============= Subnets: DMZ1public,DMZ2public,AppLayer1private,AppLayer2private,DBLayer1private,DBLayer2private ==================
  DMZ1public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DMZ1publicSubnet
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DMZ1public #TODO:  NAME and !Join [ "", [ !Ref Environment, "-Public-A" ] ]

  DMZ2public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DMZ2publicSubnet
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DMZ2public

  AppLayer1private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref AppLayer1privateSubnet
      Tags:
        - Key: Name
          Value: AppLayer1private

  AppLayer2private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref AppLayer2privateSubnet
      Tags:
        - Key: Name
          Value: AppLayer2private #! Use Join with separator "-" CF

  DBLayer1private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DBLayer1privateSubnet
      Tags:
        - Key: Name
          Value: DBLayer1private #!

  DBLayer2private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, "Fn::GetAZs": { Ref: "AWS::Region" }]
      VpcId: !Ref CFVPC
      CidrBlock: !Ref DBLayer2privateSubnet
      Tags:
        - Key: Name
          Value: DBLayer2private #!

  ##################################################################################
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachIGW
    Properties:
      LoadBalancerName: ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref DMZ1public
        - !Ref DMZ2public
      #Instances:
      #- instance-id
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: !Ref WebServerPort
          Protocol: HTTP
          #InstanceProtocol: HTTP|HTTPS|TCP|SSL
      HealthCheck:
        Target: !Join
          - ""
          - - "HTTP:"
            - !Ref WebServerPort
            - /
        HealthyThreshold: "3"
        Interval: "30"
        Timeout: "5"
        UnhealthyThreshold: "5"
  
  WebALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn: !Ref ALBTG1WebApp
      LoadBalancerArn: !Ref WebALB #required
      Port: 80 #required
      Protocol: HTTP #required

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALBSG
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSG

  BastionEC2:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro

      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          PrivateIpAddress: "10.99.1.5"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "BastionSG"
          SubnetId:
            Ref: "DMZ1public"




      #          DeleteOnTermination: "true"


      UserData: !Base64 |
        #!/bin/bash -ex
        # put your script here
      Tags:
        - Key: Name
          Value: Bastion

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BastionSG
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BastionSG

Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - BastionEC2
          - PublicDnsName
