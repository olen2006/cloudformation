AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_with_PublicIPs_And_DNS: Sample template
  showing how to create a VPC with DNS and Public IPs enabled. You will be
  billed for the AWS resources used if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the bastion host
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: >-
      Lockdown SSH access to the bastion host (default can be accessed from
      anywhere)
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  EC2InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.medium
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.medium:
      Arch: HVM64
    t3.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-west-2:
      HVM64: ami-07c0a21a5f1e474d1 #standard
      #HVMG2: ami-0fe84a5b4563d8f27
    #ca-central-1:
    #HVM64: ami-07423fb63ea0a0930
    #HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"
  InboundHTTPSPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "443"
        To: "443"
  InboundSSHPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "102"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !Ref SSHLocation
      PortRange:
        From: "22"
        To: "22"
  InboundRDPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "104"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !Ref SSHLocation
      PortRange:
        From: "3389"
        To: "3389"

  InboundEphemeralPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "103"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "1024"
        To: "65535"
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"
  PublicSubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNetworkAcl
  EC2Host:
    Type: "AWS::EC2::Instance"
    DependsOn: GatewayToInternet
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: [cfn_setup, code_deploy_agent]
        cfn_setup:
          files:
            C:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=1
            C:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Host.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -s ${AWS::StackName} -r EC2Host --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - C:\cfn\cfn-hup.conf
                  - C:\cfn\hooks.d\cfn-auto-reloader.conf
        code_deploy_agent:
          packages:
            msi:
              CodeDeployAgentInstall: !Sub "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi"
          # files:
          #   C:\cfn\scripts\CodeDeployAgentInstallation.ps1:
          #     content: !Sub |
          #       Set-ExecutionPolicy RemoteSigned
          #       Import-Module AWSPowerShell
          #       New-Item -Path "c:\temp" -ItemType "directory" -Force
          #       c:\temp\codedeploy-agent.msi /quiet /l c:\temp\host-agent-install-log.txt
          # commands:
          #   #01_download_codedeploy_agent:
          #   #  command: !Sub 'powershell.exe -Command Read-S3Object -BucketName aws-codedeploy-${AWS::Region} -Key latest/codedeploy-agent.msi -File c:\temp\codedeploy-agent.msi'
          #   02_code_deploy_agent:
          #     command: 'powershell.exe -File C:\cfn\scripts\CodeDeployAgentInstallation.ps1 -ExecutionPolicy Bypass'
          #     waitAfterCompletion: "0"
          #   03_codedeploy_service_check:
          #     command: 'powershell.exe -Command Get-Service -Name codedeployagent'
    Properties:
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref EC2InstanceType
          - Arch
      NetworkInterfaces:
        - GroupSet:
            - !Ref EC2SecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref PublicSubnet
      UserData:
        "Fn::Base64": !Sub |
          <powershell>
          cfn-init.exe -v -s ${AWS::StackName} -r EC2Host --region ${AWS::Region}
          </powershell>

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable access to the EC2 host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: "3389"
          ToPort: "3389"
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value: !Ref VPC
  PublicSubnet:
    Description: SubnetId of the public subnet
    Value: !Ref PublicSubnet
  DNSName:
    Description: DNS Name of the EC2 host
    Value: !GetAtt
      - EC2Host
      - PublicDnsName
