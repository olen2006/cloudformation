AWSTemplateFormatVersion: 2010-09-09
Description: |
  HA CloudFormation Template for  the Application running on Windows Server 2016.
Parameters:
  VPCBlock:
    Type: String
    Default: 10.99.0.0/16
    Description: None default VPC subnet

  DMZ1publicSubnet:
    Type: String
    Default: 10.99.1.0/24
    Description: "DMZ1public Subnet"

  DMZ2publicSubnet:
    Type: String
    Default: 10.99.2.0/24
    Description: "DMZ2public Subnet"

  AppLayer1privateSubnet:
    Type: String
    Default: 10.99.11.0/24
    Description: "AppLayer1private Subnet"

  AppLayer2privateSubnet:
    Type: String
    Default: 10.99.12.0/24
    Description: "AppLayer2private Subnet"

  DBLayer1privateSubnet:
    Type: String
    Default: 10.99.21.0/24
    Description: "DBLayer1private Subnet"

  DBLayer2privateSubnet:
    Type: String
    Default: 10.99.22.0/24
    Description: "DBLayer2private Subnet"

  BastionAMIOS:
    AllowedValues:
      - Microsoft Windows Server 2016 Base
    Default: Microsoft Windows Server 2016 Base
    Description: Windows Server 2016 Base.
    Type: String

  WebApplicationAMIOS:
    AllowedValues:
      - Microsoft Windows Server 2016 Base
    Default: Microsoft Windows Server 2016 Base
    Description: Windows Server 2016 Base.
    Type: String
  BastionHostName:
    Default: "WindowsBastion"
    Description: The value used for the name tag of the Bastion host
    Type: String
  WebApplicationHostName:
    Default: "WindowsWebApplication"
    Description: The value used for the name tag of the Web Application host
    Type: String
  ServerKeyName:
    Description: Name of an existing EC2 KeyPair to enable RDP access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  BastionInstanceType:
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.medium
    Default: t3.micro
    Description: Windows Based EC2 instance type for the bastion instances.
    Type: String

  WebApplicationInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - t3.medium
      - t3.large
    Default: t2.medium
    Description: Windows Server EC2 Instance type to run Web Application.
    Type: String

  NumBastionHosts:
    AllowedValues:
      - "1"
      - "2"
    Default: "1"
    Description: The number of bastion hosts to create. Min 1, Max 2.
    Type: String

  NumWebApplicationHosts:
    AllowedValues:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
    Default: "1"
    Description: The number of Web Application hosts to create. Min 1, Max 4.
    Type: String

  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external RDP access to the bastions.
    Type: String

  # WebServerPort:
  #   Description: The TCP port for the Web Server
  #   Type: Number
  #   Default: "8888"

Metadata:
  LICENSE: General License, Version 2.0
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCBlock
          - DMZ1publicSubnet
          - DMZ2publicSubnet
          - AppLayer1privateSubnet
          - AppLayer2privateSubnet
          - DBLayer1privateSubnet
          - DBLayer2privateSubnet
          - RemoteAccessCIDR
          - KeyName
      - Label:
          default: Windows Bastion EC2 configuration
        Parameters:
          - BastionInstanceType
          - BastionAMIOS
          - NumBastionHosts
          - BastionHostName
      - Label:
          default: Windows Application EC2 configuration
        Parameters:
          - WebApplicationInstanceType
          - WebApplicationAMIOS
          - NumWebApplicationHosts
          - WebApplicationHostName
    ParameterLabels:
      ##################################
      BastionAMIOS:
        default: Bastion AMI OS
      WebApplicationAMIOS:
        default: Web Application AMI OS
      BastionHostName:
        default: Bastion Host Name
      WebApplicationHostName:
        default: Web Application Host Name
      BastionInstanceType:
        default: Bastion instance type
      WebApplicationInstanceType:
        default: Web Application instance type
      KeyName:
        default: Key pair name
      NumBastionHosts:
        default: Number of bastion hosts
      NumWebApplicationHosts:
        default: Number of Web Application hosts
      ##################################
      DMZ1publicSubnet:
        default: Public subnet AZ-1
      DMZ2publicSubnet:
        default: Public subnet AZ-2
      AppLayer1privateSubnet:
        default: Private subnet 1 AZ-1
      AppLayer2privateSubnet:
        default: Private subnet 2 AZ-2
      DBLayer1privateSubnet:
        default: Private subnet 1 AZ-1 for DB
      DBLayer2privateSubnet:
        default: Private subnet 2 AZ-2 for DB
      ##################################
      RemoteAccessCIDR:
        default: Allowed bastion external access CIDR
      ##################################
      VPCID:
        default: VPC ID

Mappings:
  RegionMap:
    us-east-1:
      WinServer2016Base: ami-08bf5f54919fada4a
    us-east-2:
      WinServer2016Base: ami-0148f346905f051c8
    us-west-1:
      WinServer2016Base: ami-0b96117be9b70f713
    us-west-2:
      WinServer2016Base: ami-0a069e9a033cfaf89
    ca-central-1:
      WinServer2016Base: ami-0924aaca0769fc621

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCBlock
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"
      Tags:
        - Key: Name
          Value: CF-VPC
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: CF-IGW

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  DMZ1public:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      CidrBlock: !Ref DMZ1publicSubnet
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ1public
  DMZ2public:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      CidrBlock: !Ref DMZ2publicSubnet
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ2public
  AppLayer1private:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      CidrBlock: !Ref AppLayer1privateSubnet
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer1private
  AppLayer2private:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      CidrBlock: !Ref AppLayer2privateSubnet
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer2private
  PublicRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRT
  RouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref DMZ1public
      RouteTableId: !Ref PublicRT
  RouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref DMZ2public
      RouteTableId: !Ref PublicRT
  RoutePublicNATToInternet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NATElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  # BastionElasticIP: #script for attachement
  #   Type: 'AWS::EC2::EIP'
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value: Bastion
  #   DependsOn: VPCGatewayAttachment

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NATElasticIP
    Properties:
      AllocationId: !GetAtt
        - NATElasticIP
        - AllocationId
      SubnetId: !Ref DMZ2public
  NATGatewayRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRT
  RouteTableAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref AppLayer1private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationD:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref AppLayer2private
      RouteTableId: !Ref PrivateRT
  DMZNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZNACL
  SubnetNetworkAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DMZ1public
      NetworkAclId: !Ref DMZNACL
  SubnetNetworkAclAssociationB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DMZ2public
      NetworkAclId: !Ref DMZNACL
  DMZNACLEntryIngress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "100"
      Protocol: "6"
      PortRange:
        From: "3389"
        To: "3389"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress110:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress120:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress130:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "100"
      Protocol: "6"
      PortRange:
        From: "3389"
        To: "3389"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress110:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress120:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress130:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  AppNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppNACL
  SubnetNetworkAclAssociationC:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref AppLayer1private
      NetworkAclId: !Ref AppNACL
  SubnetNetworkAclAssociationD:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref AppLayer2private
      NetworkAclId: !Ref AppNACL
  AppNACLEntryIngress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: "100"
      Protocol: "6"
      PortRange:
        From: "3389"
        To: "3389"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !Ref VPCBlock
  AppNACLEntryIngress110:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !Ref VPCBlock
  AppNACLEntryIngress120:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !Ref VPCBlock
  AppNACLEntryIngress130:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress110:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: "110"
      Protocol: "6"
      PortRange:
        From: "80"
        To: "80"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress120:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: "120"
      Protocol: "6"
      PortRange:
        From: "443"
        To: "443"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress130:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: "130"
      Protocol: "6"
      PortRange:
        From: "1024"
        To: "65535"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 10.99.0.0/16

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
        - !Ref DMZ1public
        - !Ref DMZ2public
      Name: load-balancer
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: ALB
  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupWebApplication
      LoadBalancerArn: !Ref LoadBalancer
      Port: "80"
      Protocol: HTTP
  TargetGroupWebApplication:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: "10"
      HealthCheckPath: /
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: "2"
      Name: TG1WebApplication
      Port: "80"
      Protocol: HTTP
      UnhealthyThresholdCount: "2"
      VpcId: !Ref VPC

  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Windows Bastion Host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: BastionSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 3389
          IpProtocol: tcp
          ToPort: 3389
  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Application-elb
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LoadBalancerSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
  WebApplicationSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Application-ec2
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServerSG
      SecurityGroupIngress:
        - FromPort: 3389
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          ToPort: 3389
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          ToPort: 80
  LaunchConfigurationBastion:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    DependsOn: VPCGatewayAttachment
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", WinServer2016Base]
      InstanceType: !Ref BastionInstanceType
      SecurityGroups:
        - !Ref BastionSecurityGroup
      KeyName: { "Ref": "ServerKeyName" }
      AssociatePublicIpAddress: "true"
      UserData: !Base64
        "Fn::Join":
          - ""
          - - |
              <powershell>
              $eipalloc=(Get-EC2Address -Filter  @{Name="tag-value";Values="Bastion"}).AllocationId
              Write-Host '$eipalloc:' $eipalloc
              $iid=Get-EC2InstanceMetadata -Category InstanceId
              Write-Host '$iid:' $iid
              if($eipalloc){
                  Register-EC2Address -InstanceId $iid -AllocationId $eipalloc
              }
            #- "cfn-init.exe -v -s "
            #- !Ref "AWS::StackId"
            #- " -r DomainController "
            #- " --region "
            #- !Ref "AWS::Region"
            #- |+
            - </powershell>
            #<persist>true</persist>
      InstanceMonitoring: "true"

  AutoScalingGroupBastion:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      # TargetGroupARNs:
      #   - !Ref TargetGroupBastion
      LaunchConfigurationName: !Ref LaunchConfigurationBastion
      MinSize: !Ref NumBastionHosts
      MaxSize: "2"
      #DesiredCapacity: "1"
      Cooldown: "300"
      HealthCheckGracePeriod: "300"
      HealthCheckType: EC2
      VPCZoneIdentifier:
        - !Ref DMZ1public
        - !Ref DMZ2public
      Tags:
        - PropagateAtLaunch: "true"
          Value: !Ref BastionHostName
          Key: Name

  LaunchConfigurationWebApplication:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    DependsOn: VPCGatewayAttachment
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", WinServer2016Base]
      InstanceType: !Ref WebApplicationInstanceType
      SecurityGroups:
        - !Ref WebApplicationSecurityGroup
      KeyName: { "Ref": "ServerKeyName" }
      AssociatePublicIpAddress: "false"
      UserData: !Base64
        "Fn::Join":
          - ""
          - - |
              <powershell>
              Install-WindowsFeature -name Web-Server -IncludeManagementTools
            - </powershell>
      InstanceMonitoring: "true"

  AutoScalingGroupWebApplication:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      TargetGroupARNs:
        - !Ref TargetGroupWebApplication
      LaunchConfigurationName: !Ref LaunchConfigurationWebApplication
      MinSize: !Ref NumWebApplicationHosts
      MaxSize: "6"
      #DesiredCapacity: "2"
      Cooldown: "300"
      HealthCheckGracePeriod: "300"
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref AppLayer1private
        - !Ref AppLayer2private
      Tags:
        - PropagateAtLaunch: "true"
          Value: !Ref WebApplicationHostName # Change
          Key: Name # Change

  ScalingUpPolicyASGWebServer:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupWebApplication #required
      Cooldown: 1
      ScalingAdjustment: 1

  ScalingDownPolicyASGWebServer:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroupWebApplication #required
      Cooldown: 60
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 90
      AlarmDescription: Scale-up if CPU > 90% for 1 minute
      Period: 60
      AlarmActions:
        - Ref: ScalingUpPolicyASGWebServer
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroupWebApplication
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 40
      AlarmDescription: Scale-down if CPU < 40% for 2 minute
      Period: 60
      AlarmActions:
        - Ref: ScalingDownPolicyASGWebServer
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroupWebApplication
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  # BastionInstance:
  #   Type: 'AWS::EC2::Instance'
  #   Properties:
  #     InstanceType: t2.micro
  #     ImageId: 'ami-97785bed'
  #     KeyName: {"Ref": "ServerKeyName"}
  #     NetworkInterfaces:
  #       - GroupSet:
  #           - !Ref BastionSecurityGroup
  #         AssociatePublicIpAddress: 'true'
  #         DeviceIndex: '0'
  #         DeleteOnTermination: 'true'
  #         SubnetId: !Ref DMZ1public
  #     Tags:
  #       - Value: bastion-host
  #         Key: Name
Outputs:
  # pubIpAddress1:
  #   Description: Public ip address of bastion instance
  #   Value: !GetAtt
  #     - BastionInstance
  #     - PublicIp
  URL:
    Description: The URL of the website
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - LoadBalancer
          - DNSName
